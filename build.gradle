plugins {
	id 'java'
	id 'org.springframework.boot' version '2.7.18'
	id 'io.spring.dependency-management' version '1.0.15.RELEASE'
    id 'com.google.protobuf' version '0.9.5'
}

group = 'com.example.moty'
version = '0.0.1-SNAPSHOT'
description = 'Demo project for Spring Boot'

java {
	sourceCompatibility = JavaVersion.VERSION_1_8
	targetCompatibility = JavaVersion.VERSION_1_8
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-aop'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'io.jsonwebtoken:jjwt:0.9.1'

	compileOnly 'org.projectlombok:lombok'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'

    // Proto Buffer
    // implementation("io.github.lognet:grpc-spring-boot-starter:5.1.5")

    // gRPC
    implementation("io.grpc:grpc-netty-shaded:1.59.0")
    implementation("io.grpc:grpc-protobuf:1.59.0")
    implementation("io.grpc:grpc-stub:1.59.0")

    // gRPC Spring Boot Starter
    implementation("net.devh:grpc-server-spring-boot-starter:2.15.0.RELEASE")
    
	runtimeOnly 'com.mysql:mysql-connector-j'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

tasks.named('test') {
	useJUnitPlatform()
}

// Ensure Java 1.8 is used during compilation
tasks.withType(JavaCompile) {
	options.encoding = 'UTF-8'
	options.compilerArgs += ['-source', '1.8', '-target', '1.8']
}

protobuf {
    protoc {
        artifact = "com.google.protobuf:protoc:3.25.1"
    }
    plugins {
        grpc {
            artifact = "io.grpc:protoc-gen-grpc-java:1.59.0"
        }
    }
    generateProtoTasks {
        all().each { task ->
            task.doFirst {
                def genDir = file("$projectDir/src/generated/main/java")
                if (genDir.exists()) {
                    println "清空 Protobuf 生成檔案: $genDir"
                    delete(genDir)
                }
            }

            task.plugins {
                grpc {}
            }
        }
    }
    generatedFilesBaseDir = "$projectDir/src/generated"
}

sourceSets {
    main {
        java {
            srcDirs("src/main/java")
        }
    }
}